# 网络请求 （RxJava + Retrofit + Okhttp）

 封装 RxRequest 作为获取网络数据的唯一接口。

 * 如果后期有需要，可以通过 OkHttp 进行 Cookie 的处理；
 * Error 的统一分类处理；
 * 绑定视图的生命周期进行请求；

 1. RxRequest 接口统一返回的字段格式，在接收 Response 时，json 可以统一解析；（后期如果返回格式不一致，可以使用泛型扩展）

 2. RxRequest 在网络请求中，与 Activity / Fragment 生命周期绑定；

    在 Tab 切换时，Fragment onDestroy 后自动取消网络请求的绑定，所以在 Fragment 初始第一次加载数据时，如果异步过程还未返回数据，
    则设置数据加载是否成功的 flag 标记任然为 false，只有回调 onSuccess 时, flag 设置为 true。
    如果下次再次切换 Tab，flag == false 则再次去请求数据，并绑定视图，不至于一片空白。

3. RxRequest 统一进行错误分类和处理

    如果 Http 错误（自动重试请求2次），如果任然错误或者自定义的错误都可以捕捉，然后显示错误视图，可以点击重试，继续请求；
    比如加载数据超时，或者无网络情况直接显示错误视图，可以点击重试；

# UI 结构（一个Activity + 多个Fragment 通过 TabLayout 切换）

 1. 数据太多，不宜在内存存储过多数据，所以使用 FragmentStatePagerAdatper 适配器，切换不相邻的 Tab 时，会删除 Fragment 实例对象，包括视图，
    但是会保留 Fragment 的 View 视图，再次切换回来时，能恢复保留的 View 视图

 2. Fragment 只在用户可见，可操作时候才去加载数据，否则取消请求

    如果第一次数据返回太慢，下次切回来还是任然会自动请求；如果数据返回成功，则下次切回来不自动去加载新数据，
    除非用户下拉刷新，或者上拉加载

 3. Fragment 非 View 结构的成员变量的数据保存与恢复

    TODO FragmentStatePagerAdapter 是否需要自己手动保存成员变量？

# 关于列表 （RecyclerView 数据与视图分离，通过 Adapter 作为桥梁进行绑定）

 1. 列表后期扩展可以显示不同的类型，例如头部可以添加一个 Banner 横向的轮播图；

 2. 分页加载 加载更多的视图与逻辑处理

    可以自己选择是否加载更多数据，比如一次性加载20条数据，但服务器返回了10条数据，则不需要开启加载更多的开关；

    拥有 空视图、错误视图、正常列表视图、滑动到底部时候显示的加载更多视图、下拉到最底部的End视图

 3. 下拉刷新，请求 pager = 1 的数据

 4. 可扩展的滑动动画

# Glide 图片加载

 1. 绑定 Fragment 生命周期，在 onDestroy 时候，自动调用 clear()  取消加载，回收资源；

 2. 在 RecyclerView 中加载图片，Glide 已经自动处理了 View 的复用和请求的取消；

    2.1 如果它们在之前的位置上，用 Glide 进行过加载操作，那么在新的位置上要去执行一个新的加载操作；

 3. RequestBuilder 是Glide中请求的骨架，负责携带请求的url和你的设置项来开始一个新的加载过程。

    3.1 请求选项 RequestOptions apply() 经常使用的简化的静态 apply 有:
            请求前显示占位符 placeholder() 请求失败后显示失败图片 error()
            请求后根据 ImageView 的大小进行变换 centerCrop()
            缓存 diskCacheStrategy()
    3.2 过渡 TransitionOption transition() 不常使用

 4. Target

    4.1 当然在请求前可以 preload(width, height)
    4.2 取消请求 clear()
    4.3 重用请求的结果 setTag() getTag()


---------

Bug 解决：

 1. Error : Cannot call this method while RecyclerView is computing a layout or scrolling android.support.v7.widget.RecyclerView

    在滑动过程中，不能调用 notifyItemChanged，解决方式就是增加 RecyclerView 的滑动监听，在静止时候，且为最后一个 item 时，才进行 loadMore 操作。
    这是从根源杜绝了滑动问题。（但是不一定解决问题，如果一瞬间加载失败，还是有问题，应该从 notifyItemChanged 方面找问题。）

    notifyItemChanged 就是通过观察者模式调用 onChanged 代码：

        public void onChanged() {
            RecyclerView.this.assertNotInLayoutOrScroll((String)null); // 就是这里报错
            RecyclerView.this.mState.mStructureChanged = true;
            RecyclerView.this.processDataSetCompletelyChanged(true);
            if (!RecyclerView.this.mAdapterHelper.hasPendingUpdates()) {
                RecyclerView.this.requestLayout(); // 更新UI
            }
        }

        只有满足 recyclerView.getScrollState() == RecyclerView.SCROLL_STATE_IDLE && !recyclerView.isComputingLayout() 才可以  notifyItemChanged()

        这是一个思路，一直监听滚动状态和Layout状态


        或者第二个思路：将 RecyclerView.this.requestLayout(); 加入到 Handler 处理的队列中
        主线程刷新UI是通过消息队列，当列表正在滚动或者layout时调用notifyDataSetChanged()，
        那么notifyDataSetChanged()里面的代码是和正在滚动或者layout同一消息里面的，
        如果加上Handler.post()，那么就是将新建立的消息放入消息队列末尾，这样两个刷新不在同一个消息，有先后顺序。

 2. Error : Canvas: trying to use a recycled bitmap android.graphics.Bitmap

    原因：Glide SimpleTarget<Bitmap> 在页面切换时回收了 bitmap 资源

    解决办法：使用 4.9.0 的 CustomViewTarget<ImageView, Bitmap> 在 onResourceCleared() 方法中显示 placeholder





